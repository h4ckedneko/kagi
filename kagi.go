package kagi

import (
	"crypto/rand"
	"encoding/base64"
)

const keyPrefix = "base64:"

// New returns a randomly generated secure application key.
func New(size int) string {
	b := make([]byte, size)
	if _, err := rand.Read(b); err != nil {
		panic(err)
	}
	return keyPrefix + base64.RawStdEncoding.EncodeToString(b)
}

// New8 is a helper for New that returns an 8-bytes application key.
func New8() string {
	return New(8)
}

// New16 is a helper for New that returns a 16-bytes application key.
func New16() string {
	return New(16)
}

// New32 is a helper for New that returns a 32-bytes application key.
func New32() string {
	return New(32)
}

// New64 is a helper for New that returns a 64-bytes application key.
func New64() string {
	return New(64)
}

// Decode decodes an application key and returns its raw bytes.
// It accepts application key that was generated by New
// or application key that was manually hardcoded.
func Decode(key string) []byte {
	n := len(keyPrefix)
	if len(key) < n || key[:n] != keyPrefix {
		return []byte(key)
	}

	b, err := base64.RawStdEncoding.DecodeString(key[n:])
	if err != nil {
		panic(err)
	}
	return b
}

// DecodeString is like Decode, but it returns the key as string.
func DecodeString(key string) string {
	return string(Decode(key))
}
